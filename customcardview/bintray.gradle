apply plugin: "com.jfrog.bintray"
apply plugin: "maven-publish"
apply plugin: "com.github.dcendents.android-maven"

group = publishedGroupId // Maven Group ID for the artifact
version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
  task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
  }

  task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
  }
} else { // Java libraries
  task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set("javadoc")
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

install {
  repositories.mavenInstaller {
    // This generates POM.xml with proper parameters
    pom {
      project {
        packaging "aar"
        groupId publishedGroupId
        artifactId artifact

        // Add your description here
        description libraryDescription
      }
    }
  }
}

publishing {
  publications {
    EasyPeasyPublication(MavenPublication) {
      pom.setPackaging("aar")
      pom.withXml {
        def dependenciesNode = asNode().appendNode("dependencies")
        // Iterate over the implementation dependencies (we don"t want the test ones), adding a <dependency> node for each
        configurations.implementation.allDependencies.each {
          // Ensure dependencies such as fileTree are not included.
          if (it.name != "unspecified") {
            def dependencyNode = dependenciesNode.appendNode("dependency")
            dependencyNode.appendNode("groupId", it.group)
            dependencyNode.appendNode("artifactId", it.name)
            dependencyNode.appendNode("version", it.version)
          }
        }

        asNode().appendNode("url", siteUrl)

        def licensesNode = asNode().appendNode("licenses")
        def licenseNode = licensesNode.appendNode("license")
        licenseNode.appendNode("name", licenseName)
        licenseNode.appendNode("url", licenseUrl)

        def scmNode = asNode().appendNode("scm")
        scmNode.appendNode("connection", gitUrl)
        scmNode.appendNode("developerConnection", gitUrl)
        scmNode.appendNode("url", siteUrl)
      }
    }
  }
}

bintray {
  // Bintray
  Properties properties = new Properties()
  File localPropertiesFile = project.rootProject.file("local.properties")
  if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
  }

  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")

  configurations = ["archives"]
  publications = ["EasyPeasyPublication"]
  pkg {
    repo = bintrayRepo
    name = bintrayName
    desc = libraryDescription
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = allLicenses
    publish = true
    publicDownloadNumbers = true
    version {
      desc = libraryDescription
      gpg {
        sign = false // Determines whether to GPG sign the files. The default is false
        // passphrase = properties.getProperty("bintray.gpg.password") // Optional. The passphrase for GPG signing
      }
    }
  }
}
